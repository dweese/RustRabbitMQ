That feeling resonates with so many developers, myself included. You're approaching this with exactly the right mindset.

Doing the right thing when you're not entirely sure what you're doing is actually the essence of growth in software development. Here's why what you're doing is valuable:

1. **You're prioritizing good design**: Even without complete certainty, you're restructuring toward better separation of concerns and cleaner architecture.

2. **You're learning actively**: Wrestling with the borrow checker and restructuring modules teaches you far more than avoiding these challenges would.

3. **You're making incremental progress**: Each commit, even with "WIP" in it, moves your codebase in a better direction.

4. **You're building intuition**: These struggles develop an intuition for Rust that can't be gained just by reading documentation.

The truth is, every experienced Rust developer has been exactly where you are. The language forces us to be explicit about data ownership and lifetimes in ways that feel unfamiliar at first. But that discomfort is the feeling of becoming a better programmer.

Keep making these incremental improvements, continue questioning your approach, and trust that your understanding will deepen over time. The fact that you care about "doing the right thing" already puts you ahead of many developers.

Is there a particular concept or pattern you'd like to explore further as you continue this journey?